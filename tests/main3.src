struct first {};
struct second inherits first {};
struct third inherits first {};
struct fourth inherits second, third {};

// ====== Class declarations ====== //
struct POLYNOMIAL {
	public func evaluate(x: float) -> float;
	public func evaluate2(x: float) -> float;                     // 6.2
};
struct POLYNOMIAL {                                                   // 8.1
	public func evaluate(x: float) -> float;
    public func evaluate(x: integer) -> integer;                  // 9.2
};
struct LINEAR inherits POLYNOMIAL {
	private let a: float;
	private let b: float;
	private let b: integer;                                       // 8.3

    public func b() -> void;
	public func build(A: float, B: float) -> LINEAR;
	public func evaluate(x: float) -> float;                      // 9.3
};

struct QUADRATIC inherits POLYNOMIAL {
	private let a: float;                                         // 8.5
	private let b: float;                                         // 8.5
	private let c: float;

	public func build(a: float, B: float, C: float) -> QUADRATIC;
	public func evaluate(x: float) -> float;                      // 9.3
};

struct C inherits E {
	private let a: integer;
};

struct D inherits C {
	private let b: integer;
};

struct E inherits D {                                             // 14.1
	private let c: integer;
};


// ====== struct implementations ====== //
impl POLYNOMIAL {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl LINEAR {
  func build(A: float, B: float) -> LINEAR
  {
    let new_function: LINEAR;
    new_function.a = A;
    new_function.b = B;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}

impl QUADRATIC {
  func evaluate(x: float) -> float
  {
    let result: float;
    //Using Horner's method
    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(a: float, B: float, C: float) -> QUADRATIC
  {
    let new_function: QUADRATIC ;
    let int: integer;
    int = 1 * new_function.a;
    new_function.a = a + B * 3;                                       // 10.1
    new_function.b = B;
    new_function.c = 1;                                               // 10.2
    return (1);                                                       // 10.3
  }
  func build2(A: float, B: float, C: float) -> QUADRATIC              // 6.1
  {
    let new_function: QUADRATIC;
    new_function.a = A;
    new_function.b = B;
    new_function.c = C;
    return (new_function);
  }
}

func f(i: integer) -> void {}
func f(i: integer) -> void {}                                        // 8.2
func f(i: integer, j: integer) -> integer {}                         // 9.1

func f3(p1: integer[2][3]) -> integer {}


// ====== main ====== //
func main() -> void
{
  let a: a;                                                         // 11.5
  let c: LINEAR;
  let f1: LINEAR;
  let f2: QUADRATIC;
  let counter: integer;
  let counter: float;                                               // 8.4
  let i: integer[2][3];
  let j: integer[1][2][3];
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  c.a = 1;
  c.z = 1;                                                          // 11.2
  counter = c.f();                                                  // 11.3
  undefined();                                                      // 11.4
  counter = a;                                                      // 11.1
  f(1,1,1);                                                         // 12.1
  f(1.2,1);                                                         // 12.2
  i[2] = 1;                                                         // 13.1
  i[2][1.3] = 2;                                                    // 13.2
  f3(j);                                                            // 13.3
  counter.x = 1;                                                    // 15.1
  while(counter <= 10)
  {
    write(counter);
    read(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
}

/*
1.   |X| global symbol table
2.   |X| class symbol table
3.1  |X| class data member
3.2  |X| function's local variable
4.1  |X| free function
4.2  |X| member function
6.1  |X| undeclared member function definition
6.2  |X| undefined member function declaration
8.1  |X| multiply declared class
8.2  |X| multiply defined free function
8.3  |X| multiply declared identifier in class
8.4  |X| multiply declared identifier in function
8.5  |X| shadowed inherited data member
9.1  |X| Overloaded free function
9.2  |X| Overloaded member function
9.3  |X| Overridden inherited member function
10.1 |X| Type error in expression
10.2 |X| Type error in assignment statement
10.3 |X| Type error in return statement
11.1 |X| Undeclared local variable
11.2 |X| Undeclared data member
11.3 |X| Undeclared member function
11.4 |X| Undeclared free function
11.5 |X| Undeclared class
12.1 |X| Function call with wrong number of parameters
12.2 |X| Function call with wrong type of parameters
13.1 |X| Use of array with wrong number of dimensions
13.2 |X| Array index is not an integer
13.3 |X| Array parameter using wrong number of dimensions
14.1 |X| Circular class dependency
15.1 |X| "." operator used on non-class type
*/
